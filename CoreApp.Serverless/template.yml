AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  An AWS Serverless Application that uses the ASP.NET Core framework running in
  Amazon Lambda.
Parameters:
  ShouldCreateBucket:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: >-
      If true then the S3 bucket that will be proxied will be created with the
      CloudFormation stack.
  BucketName:
    Type: String
    Description: >-
      Name of S3 bucket that will be proxied. If left blank a name will be
      generated.
    MinLength: '0'
Conditions:
  CreateS3Bucket: !Equals 
    - !Ref ShouldCreateBucket
    - 'true'
  BucketNameGenerated: !Equals 
    - !Ref BucketName
    - ''
Resources:
  AspNetCoreFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: >-
        CoreApp.Serverless::CoreApp.Serverless.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnetcore2.1
      CodeUri: ''
      MemorySize: 256
      Timeout: 30
      Role: null
      Policies:
        - AWSLambdaFullAccess
      Environment:
        Variables:
          AppS3Bucket: !If 
            - CreateS3Bucket
            - !Ref Bucket
            - !Ref BucketName
          DefaultConnection: something
          AWSKey: something
          AWSSecret: something
          StripeKey: something
      Events:
        PutResource:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: ANY
  LambdaTriggerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Id: AspNetCoreFunction
          Arn: !GetAtt 
            - AspNetCoreFunction
            - Arn
  LambdaTriggerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - AspNetCoreFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - LambdaTriggerRule
        - Arn
  Bucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateS3Bucket
    Properties:
      BucketName: !If 
        - BucketNameGenerated
        - !Ref 'AWS::NoValue'
        - !Ref BucketName
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value: !Sub >-
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  S3ProxyBucket:
    Value: !If 
      - CreateS3Bucket
      - !Ref Bucket
      - !Ref BucketName
