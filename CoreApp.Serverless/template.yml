AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: >-
  An AWS Serverless Application that uses the ASP.NET Core framework running in
  Amazon Lambda.
Parameters:
  ShouldCreateBucket:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Description: >-
      If true then the S3 bucket that will be proxied will be created with the
      CloudFormation stack.
  BucketName:
    Type: String
    Description: >-
      Name of S3 bucket that will be proxied. If left blank a name will be
      generated.
    MinLength: '0'
Conditions:
  CreateS3Bucket: !Equals 
    - !Ref ShouldCreateBucket
    - 'true'
  BucketNameGenerated: !Equals 
    - !Ref BucketName
    - ''
Resources:
  FeedbackTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "FeedbackTopic"

  AspNetCoreRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - AWSLambdaFullAccess
        - AWSS3FullAccess
      RoleName: AspNetCoreRole

  AspNetCoreFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: >-
        CoreApp.Serverless::CoreApp.Serverless.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnetcore2.1
      CodeUri: ''
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt AspNetCoreRole.Arn
      Environment:
        Variables:
          AppS3Bucket: !If 
            - CreateS3Bucket
            - !Ref Bucket
            - !Ref BucketName
          DefaultConnection: something
          AWSKey: something
          AWSSecret: something
          StripeKey: something
          FeedbackSNSTopic: !Ref FeedbackTopic
      Events:
        PutResource:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: ANY
  LambdaTriggerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(1 hour)
      Targets:
        - Id: AspNetCoreFunction
          Arn: !GetAtt 
            - AspNetCoreFunction
            - Arn
          Input: '{"body": "","resource": "/{proxy+}","path": "/dailyrun","httpMethod": "GET","isBase64Encoded": true,   "queryStringParameters": {},   "pathParameters": {},   "stageVariables": {},   "headers": {     "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",     "Accept-Encoding": "gzip, deflate, sdch",     "Accept-Language": "en-US,en;q=0.8",     "Cache-Control": "max-age=0",     "CloudFront-Forwarded-Proto": "https",     "CloudFront-Is-Desktop-Viewer": "true",     "CloudFront-Is-Mobile-Viewer": "false",     "CloudFront-Is-SmartTV-Viewer": "false",     "CloudFront-Is-Tablet-Viewer": "false",     "CloudFront-Viewer-Country": "US",     "Host": "1234567890.execute-api.ap-southeast-2.amazonaws.com",     "Upgrade-Insecure-Requests": "1",     "User-Agent": "Custom User Agent String",     "Via": "1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)",     "X-Amz-Cf-Id": "cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==",     "X-Forwarded-For": "127.0.0.1, 127.0.0.2",     "X-Forwarded-Port": "443",     "X-Forwarded-Proto": "https"   },   "requestContext": {     "accountId": "123456789012",     "resourceId": "123456",     "stage": "prod",     "requestId": "c6af9ac6-7b61-11e6-9a41-93e8deadbeef",     "requestTime": "09/Apr/2015:12:34:56 +0000",     "requestTimeEpoch": 1428582896000,     "identity": {       "cognitoIdentityPoolId": null,       "accountId": null,       "cognitoIdentityId": null,       "caller": null,       "accessKey": null,       "sourceIp": "127.0.0.1",       "cognitoAuthenticationType": null,       "cognitoAuthenticationProvider": null,       "userArn": null,       "userAgent": "Custom User Agent String",       "user": null     },     "path": "/dailyrun",     "resourcePath": "/{proxy+}",     "httpMethod": "POST",     "apiId": "1234567890",     "protocol": "HTTP/1.1"   } }'
  LambdaTriggerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - AspNetCoreFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - LambdaTriggerRule
        - Arn
  Bucket:
    Type: 'AWS::S3::Bucket'
    Condition: CreateS3Bucket
    Properties:
      BucketName: !If 
        - BucketNameGenerated
        - !Ref 'AWS::NoValue'
        - !Ref BucketName
Outputs:
  ApiURL:
    Description: API endpoint URL for Prod environment
    Value: !Sub >-
      https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  S3ProxyBucket:
    Value: !If 
      - CreateS3Bucket
      - !Ref Bucket
      - !Ref BucketName
